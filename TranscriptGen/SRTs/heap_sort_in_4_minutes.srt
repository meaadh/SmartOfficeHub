1
00:00:00,000 --> 00:00:05,860
Today we're going to learn heap sort. Let's start with some terminology. A heap

2
00:00:05,860 --> 00:00:11,600
is simply an ordered binary tree. A max heap has a restriction that the value of

3
00:00:11,600 --> 00:00:17,100
the parent nodes are greater than the value of the child nodes. Here's an

4
00:00:17,100 --> 00:00:22,680
example of a max heap. We'll make use of a few functions when running heap sort.

5
00:00:22,680 --> 00:00:29,920
First we have buildMaxHeap. This creates a max heap from an unsorted array.

6
00:00:30,200 --> 00:00:36,740
We'll also use heapify. This is similar to buildMaxHeap, except faster because we

7
00:00:36,740 --> 00:00:41,380
assume part of the array is already sorted. You'll see what I mean.

8
00:00:41,380 --> 00:00:45,600
One note. For this video I'm less concerned with you knowing how these

9
00:00:45,600 --> 00:00:50,600
methods work, but rather that they exist and when to use them. Once you understand

10
00:00:50,600 --> 00:00:53,840
the basics of heap sort, you'll understand these functions from their

11
00:00:53,840 --> 00:00:59,680
pseudocode. Let's get started. We have the following array that we're tasked to

12
00:00:59,680 --> 00:01:05,280
sort. In a nutshell, we'll continuously create max heaps to find the largest

13
00:01:05,280 --> 00:01:10,600
item. We'll then remove that item from the heap and into a sorted partition.

14
00:01:10,600 --> 00:01:17,000
We'll begin by representing our array as a tree. To see how we did that, simply

15
00:01:17,000 --> 00:01:22,640
look at the array from left to right and the tree from top to bottom.

16
00:01:22,640 --> 00:01:33,280
Now that we have a tree, let's create our first heap. We assume this is an

17
00:01:33,280 --> 00:01:37,960
unsorted array, so we call buildMaxHeap.

18
00:01:39,840 --> 00:01:46,520
Now that we have our max heap, we know the largest item, 9. We swap 9 with the

19
00:01:46,520 --> 00:01:50,280
item at the end of the array, 1.

20
00:01:51,280 --> 00:01:58,560
Finally, we remove 9 from the tree and consider it sorted. Looks good so far,

21
00:01:58,560 --> 00:02:03,800
except we're back to having a tree and not a heap. This time we call heapify

22
00:02:03,800 --> 00:02:08,120
since only the item 1 is out of place.

23
00:02:08,320 --> 00:02:14,800
1 floats down to the bottom and the largest number heads to the top.

24
00:02:15,480 --> 00:02:24,000
We're back to having a max heap. Let's swap the largest number 8 with the item

25
00:02:24,000 --> 00:02:29,640
at the end of the unsorted part of the array, 2. We remove 8 and consider it

26
00:02:29,640 --> 00:02:32,040
sorted.

27
00:02:36,000 --> 00:02:41,800
Again, we need our heap back, so let's call heapify.

28
00:02:45,800 --> 00:02:50,800
I think you see the pattern. I'll let you watch the rest of the video without

29
00:02:50,800 --> 00:02:53,360
voiceover.

30
00:03:44,800 --> 00:03:52,200
We're all done. Our array is fully sorted. Here's the pseudocode for heap sort.

31
00:03:52,600 --> 00:03:59,040
The time complexity of heap sort is O of n log n. buildMaxHeap takes O

32
00:03:59,040 --> 00:04:05,440
of n time. heapify runs in O of log n time, but we end up calling it n minus 1

33
00:04:05,440 --> 00:04:11,400
times. Thank you for watching. If you enjoyed the video, please like it and

34
00:04:11,400 --> 00:04:13,440
subscribe.

