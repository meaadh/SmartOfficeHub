1
00:00:00,000 --> 00:00:02,000
Today we're going to learn merge sort.

2
00:00:02,880 --> 00:00:05,320
A few quick points, then we'll get to the example.

3
00:00:06,120 --> 00:00:08,120
Merge sort is usually done recursively.

4
00:00:09,160 --> 00:00:14,840
When you think of merge sort, as with other recursive algorithms, I want you to think of divide and conquer.

5
00:00:15,560 --> 00:00:19,140
We're going to break our problem into smaller problems in order to solve it.

6
00:00:20,520 --> 00:00:24,500
Let's get started. We have the following array and we want it sorted.

7
00:00:25,600 --> 00:00:29,560
We're going to continuously split the array in half, our divide step.

8
00:00:30,040 --> 00:00:32,120
Until we are left with the individual items.

9
00:00:33,000 --> 00:00:35,000
Watch and see.

10
00:00:49,120 --> 00:00:52,160
Our array is now broken down into individual items.

11
00:00:52,160 --> 00:01:01,160
One note before we start sorting. When you implement this in code, these steps will be done in a different order because of recursion.

12
00:01:01,640 --> 00:01:05,280
But I think this human friendly order provides more clarity in learning.

13
00:01:06,280 --> 00:01:08,800
Let's continue. We're ready to sort.

14
00:01:09,480 --> 00:01:14,760
We'll examine the individual items, compare their values, and merge them into temporary arrays.

15
00:01:23,040 --> 00:01:30,040
The temporary arrays are sorted, but there's work left to do. Let's jump up the recursion stack and continue.

16
00:01:31,120 --> 00:01:35,680
We merge our smaller arrays into a larger one, inserting items in the correct order.

17
00:01:41,080 --> 00:01:43,080
We'll use the same array again.

18
00:01:43,080 --> 00:01:47,080
We'll merge our larger arrays into a larger one, inserting items in the correct order.

19
00:02:04,840 --> 00:02:07,840
One more merge and we'll have our sorted array.

20
00:02:13,080 --> 00:02:21,080
And that's it. Our array is now sorted.

21
00:02:22,080 --> 00:02:29,080
Here's the pseudocode for merge sort. On the left you have the recursive part, which halves the arrays.

22
00:02:29,080 --> 00:02:32,080
On the right is the merge function which combines the arrays.

23
00:02:34,080 --> 00:02:39,080
Merge sort has a worst case time complexity of O of n times log n.

24
00:02:40,080 --> 00:02:43,080
The easiest way to think about it is to start with the merge step.

25
00:02:43,080 --> 00:02:47,080
Looking at the while loop, we see we have to visit n items.

26
00:02:47,080 --> 00:02:53,080
The log n comes from the maximum height of a binary tree we create, which is on the order of log n.

27
00:02:55,080 --> 00:03:01,080
Thank you for watching. Please comment suggestions for future videos below, as well as any questions you may have.

