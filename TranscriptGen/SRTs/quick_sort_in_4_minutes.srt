1
00:00:00,000 --> 00:00:03,540
Today, we're going to learn quicksort.

2
00:00:03,540 --> 00:00:06,720
Like merge sort, quicksort is a recursive algorithm.

3
00:00:06,720 --> 00:00:11,880
However, when you think of quicksort, I want you to think of the word pivot.

4
00:00:11,880 --> 00:00:16,600
A pivot is simply one of the items in the array that meets the following three conditions

5
00:00:16,600 --> 00:00:18,600
after we sorted it.

6
00:00:18,600 --> 00:00:23,720
First, the pivot is in its correct position in the final sorted array.

7
00:00:23,720 --> 00:00:29,640
This means that all items to the left are smaller, and all items to the right are larger.

8
00:00:29,640 --> 00:00:32,640
Let's look at an example.

9
00:00:32,640 --> 00:00:35,680
We're asked to sort the following array.

10
00:00:35,680 --> 00:00:37,500
Let's choose a pivot.

11
00:00:37,500 --> 00:00:42,720
I'll explain the best way to do this later, but for now, let's just choose three.

12
00:00:42,720 --> 00:00:48,720
First, we move the pivot to the end of the array to get it out of our way.

13
00:00:48,720 --> 00:00:53,540
Next, we're going to look for two items.

14
00:00:53,540 --> 00:00:59,520
Item from left, which is the first item, starting from the left, that is larger than our pivot.

15
00:00:59,520 --> 00:01:04,800
Second, item from right, which is the first item, starting from the right, that is smaller

16
00:01:04,800 --> 00:01:09,300
than our pivot.

17
00:01:09,300 --> 00:01:15,440
Starting at two, we can see that six is item from left.

18
00:01:15,440 --> 00:01:21,920
Now starting at the right, we see that one is item from right.

19
00:01:21,920 --> 00:01:28,160
Let's swap item from left with item from right.

20
00:01:28,160 --> 00:01:30,100
We repeat the process.

21
00:01:30,100 --> 00:01:36,720
This time, five is item from left, and zero is item from right.

22
00:01:36,720 --> 00:01:45,960
Again, we swap the two.

23
00:01:45,960 --> 00:01:47,320
One more time.

24
00:01:47,320 --> 00:01:52,240
This time, we see that item from left has a greater index than item from right, so we

25
00:01:52,240 --> 00:01:58,080
know we're done.

26
00:01:58,080 --> 00:02:03,640
We swap item from left with our pivot.

27
00:02:03,640 --> 00:02:11,000
Three, our pivot is now in its correct spot.

28
00:02:11,000 --> 00:02:14,400
To prove it, let's review our three conditions.

29
00:02:14,400 --> 00:02:21,600
As you can see, all items to the left are smaller, and all items to the right are larger.

30
00:02:21,600 --> 00:02:23,840
We said quicksort is recursive.

31
00:02:23,840 --> 00:02:29,200
Let's go through the process one more time with the larger partition we just made.

32
00:02:29,200 --> 00:02:39,480
We'll choose seven as our pivot and move it to the end.

33
00:02:39,480 --> 00:02:41,040
I'll let you watch without voiceover.

34
00:03:09,480 --> 00:03:16,040
Now, we have three and seven in their correct positions.

35
00:03:16,040 --> 00:03:24,440
I think you understand the concept, so we'll let recursion handle the rest.

36
00:03:24,440 --> 00:03:27,400
One important question is how do we choose the pivot?

37
00:03:27,400 --> 00:03:32,200
This makes a large difference in the performance of the algorithm, as we want to choose a pivot

38
00:03:32,200 --> 00:03:38,480
that divides the array in half or as close as possible to even out the work.

39
00:03:38,480 --> 00:03:41,160
One popular method is called median of three.

40
00:03:41,160 --> 00:03:48,200
In this method, we look at the first, middle, and last elements of the array.

41
00:03:48,200 --> 00:03:52,480
We sort them properly and choose the middle item as our pivot.

42
00:03:52,480 --> 00:03:56,640
We're making the guess that the middle of these three items could be close to the median

43
00:03:56,640 --> 00:04:02,200
of the entire array, and as you can see, it's not too far off.

44
00:04:02,200 --> 00:04:07,600
Here's the pseudocode for quicksort.

45
00:04:07,600 --> 00:04:13,080
Quicksort has the worst case time complexity of big O of n squared, but if a pivot is chosen

46
00:04:13,080 --> 00:04:17,320
properly, it can be shown to have an average case of big O of n log n.

47
00:04:17,320 --> 00:04:20,800
Thank you for watching.

48
00:04:20,800 --> 00:04:22,960
Please like and subscribe if you enjoyed the video.

